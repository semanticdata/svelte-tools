<!doctype html>
<html lang="en" class="h-full">
  <head>
    <meta charset="UTF-8" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1.0, viewport-fit=cover"
    />
    <meta name="description" content="Svelte Tools" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>Svelte Tools</title>
  </head>
  <body class="h-full bg-gray-50">
    <div class="flex h-full flex-col md:flex-row">
      <!-- Mobile menu overlay -->
      <div
        class="mobile-menu-overlay fixed inset-0 z-10 bg-black bg-opacity-50 transition-opacity duration-300 md:hidden opacity-0 pointer-events-none"
      >
      </div>

      <!-- Sidebar -->
      <aside
        class="mobile-sidebar fixed inset-y-0 left-0 z-20 w-64 transform -translate-x-full bg-white shadow-lg transition-transform duration-300 ease-in-out md:relative md:translate-x-0 h-full overflow-y-auto"
      >
        <div
          class="flex bg-gray-50 items-center justify-between p-4 border-b border-gray-200"
        >
          <h1 class="text-xl font-bold text-gray-800">Svelte Tools</h1>
          <button
            class="p-1 rounded-md text-gray-500 hover:bg-gray-100 focus:outline-none md:hidden"
            aria-label="Close menu"
            data-menu-close
          >
            <svg
              class="h-6 w-6"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
        <nav class="p-2">
          <slot name="sidebar" />
        </nav>
      </aside>

      <!-- Main Content -->
      <div class="flex-1 flex flex-col overflow-hidden h-full">
        <!-- Mobile header -->
        <header class="md:hidden bg-white shadow-sm sticky top-0 z-10">
          <div class="flex bg-gray-50 items-center justify-between p-4">
            <button
              class="p-2 -ml-2 rounded-md text-gray-500 hover:text-gray-600 hover:bg-gray-100 focus:outline-none"
              aria-label="Toggle menu"
              data-menu-toggle
            >
              <svg
                class="h-6 w-6"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M4 6h16M4 12h16M4 18h16"></path>
              </svg>
            </button>
            <h1 class="text-lg font-semibold text-gray-800">Svelte Tools</h1>
            <div class="w-10"></div>
            {/* For balance */}
          </div>
        </header>

        <!-- Main content area -->
        <main class="flex-1 overflow-y-auto p-4 md:p-6">
          <slot />
        </main>
      </div>
    </div>
    <style>
      html,
      body {
        margin: 0;
        width: 100%;
        height: 100%;
        -webkit-tap-highlight-color: transparent;
      }

      aside::-webkit-scrollbar {
        width: 6px;
      }

      aside::-webkit-scrollbar-track {
        background: transparent;
      }

      aside::-webkit-scrollbar-thumb {
        background-color: #9ca3af;
        border-radius: 3px;
      }

      aside::-webkit-scrollbar-thumb:hover {
        background-color: #6b7280;
      }

      main {
        scroll-behavior: smooth;
        -webkit-overflow-scrolling: touch;
      }

      /* Improve touch targets */
      @media (max-width: 767px) {
        button,
        [role="button"] {
          min-height: 44px;
          min-width: 44px;
        }
      }
    </style>

    <script is:inline>
      // Mobile menu functionality
      document.addEventListener("DOMContentLoaded", () => {
        // Use a fixed ID for the menu elements
        const menu = document.querySelector(".mobile-sidebar");
        const menuOverlay = document.querySelector(".mobile-menu-overlay");
        const menuToggle = document.querySelector("[data-menu-toggle]");
        const menuClose = document.querySelector("[data-menu-close]");

        // Make sure elements exist before setting up event listeners
        if (!menu || !menuOverlay) {
          console.error("Menu elements not found");
          return;
        }

        // Initialize menu state
        let isMenuOpen = false;

        function toggleMenu(show) {
          isMenuOpen = show;
          if (menu && menuOverlay) {
            if (show) {
              menu.classList.remove("-translate-x-full");
              menuOverlay.classList.remove("opacity-0", "pointer-events-none");
              document.body.style.overflow = "hidden";
            } else {
              menu.classList.add("-translate-x-full");
              menuOverlay.classList.add("opacity-0", "pointer-events-none");
              document.body.style.overflow = "";
            }
          }
        }

        // Toggle menu
        if (menuToggle) {
          menuToggle.addEventListener("click", (e) => {
            e.preventDefault();
            toggleMenu(!isMenuOpen);
          });
        }

        // Close menu
        if (menuClose) {
          menuClose.addEventListener("click", (e) => {
            e.preventDefault();
            toggleMenu(false);
          });
        }

        // Close menu when clicking overlay
        if (menuOverlay) {
          menuOverlay.addEventListener("click", (e) => {
            e.preventDefault();
            toggleMenu(false);
          });
        }

        // Close menu when clicking a nav link (for single-page navigation)
        document.querySelectorAll("nav a, nav button").forEach((link) => {
          link.addEventListener("click", () => {
            if (window.innerWidth < 768) {
              // Only on mobile
              toggleMenu(false);
            }
          });
        });

        // Handle window resize
        let resizeTimer;
        function handleResize() {
          clearTimeout(resizeTimer);
          resizeTimer = setTimeout(() => {
            if (window.innerWidth >= 768) {
              // On desktop, ensure menu is visible and reset body scroll
              if (menu) menu.classList.remove("-translate-x-full");
              if (menuOverlay)
                menuOverlay.classList.add("opacity-0", "pointer-events-none");
              document.body.style.overflow = "";
              isMenuOpen = false;
            }
          }, 250);
        }

        window.addEventListener("resize", handleResize);

        // Initialize menu state on load
        handleResize();
      });
    </script>
  </body>
</html>
